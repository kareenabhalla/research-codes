#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jun 21 10:14:29 2022

@author: kareenabhalla
"""
from multi_newton import jacobian, multi_newton
import matplotlib.pyplot as plt
import numpy as np

def generatedata():
    dataes = np.array([1.050000000000000044e+00, 1.149999999999999911e+00, 1.250000000000000000e+00, 1.350000000000000089e+00, 1.449999999999999956e+00, 1.550000000000000044e+00, 1.650000000000000133e+00, 1.750000000000000000e+00, 1.850000000000000089e+00, 1.949999999999999956e+00, 2.049999999999999822e+00, 2.150000000000000355e+00, 2.250000000000000000e+00, 2.350000000000000089e+00, 2.450000000000000178e+00, 2.549999999999999822e+00, 2.650000000000000355e+00, 2.750000000000000000e+00, 2.850000000000000089e+00, 2.950000000000000178e+00, 3.049999999999999822e+00, 3.150000000000000355e+00, 3.250000000000000000e+00, 3.350000000000000533e+00, 3.450000000000000178e+00, 3.549999999999999822e+00, 3.650000000000000355e+00, 3.750000000000000000e+00, 3.850000000000000533e+00, 3.950000000000000178e+00])
    datays = np.array([1.551327999245897746e-02, 1.786617154471464158e-02, 2.303717999170154171e-02, 2.350477755525696641e-02, 3.029741766937465303e-02, 3.875483900482221133e-02, 4.716930606934753578e-02, 5.818862773077894401e-02, 8.190869036353022603e-02, 1.063492045481435194e-01, 1.594702506990102464e-01, 2.527098147138080453e-01, 4.705768834732048100e-01, 1.072405319132138324e+00, 2.605157637666172477e+00, 2.610934619340004481e+00, 1.064885331986767936e+00, 4.702760615686735757e-01, 2.537516800838050535e-01, 1.632819896958487838e-01, 1.057228433742683632e-01, 7.662937031471579730e-02, 5.912726855748855204e-02, 4.288276180982273506e-02, 3.923339311407704477e-02, 2.820340050990007702e-02, 2.480963257666300714e-02, 2.037123969288243824e-02, 2.000695725996675528e-02, 1.697404996065374899e-02])
    datasigs = np.array([8.682814353228511615e-04, 8.859708465975397150e-04, 9.853463128311693974e-04, 9.996488704503030988e-04, 1.294111448104201664e-03, 1.567528156248461542e-03, 1.566465436644882536e-03, 1.979471850302619990e-03, 1.733960205252912208e-03, 2.542560313548627299e-03, 2.790077949084624007e-03, 2.818762113804922347e-03, 4.497173271325856890e-03, 7.541589136299701145e-03, 1.232395890907932688e-02, 1.127221772057000054e-02, 7.866511510736567264e-03, 4.704716798171118021e-03, 3.843141073655200433e-03, 3.312153344708130935e-03, 2.989272429968114781e-03, 1.702223019285954882e-03, 1.823004267155874276e-03, 1.155765378618709089e-03, 1.913449233354692349e-03, 1.366015148435375474e-03, 7.649403832506478833e-04, 1.099929135533331227e-03, 9.753586066685726455e-04, 9.883113932988977536e-04])
    return dataes, datays, datasigs

def model(params,e):
    return params[0]/((e - params[1])**2 + (params[2]**2)/4)

def fs(params):
    dataes, datays, datasigs = generatedata()
    c, E0, T = params
    resids = datays - model(params,dataes)
    f0 = np.sum((resids*(1/((dataes - E0)**2 + T**2/4)))/datasigs**2)
    f1 = np.sum((resids*((2*c*(dataes - E0))/((dataes - E0)**2 + T**2/4)**2))/datasigs**2)
    f2 = np.sum((resids*((-1*c*T)/2*((dataes - E0)**2 + T**2/4)**2))/datasigs**2)
    return np.array([f0, f1, f2])

if __name__ == '__main__':
    dataes, datays, datasigs = generatedata()
    colds = np.array([0.035, 2.5, 0.5])
    params = multi_newton(fs,jacobian,colds,kmax=500,tol=1.e-6)
    print(params)
    plt.plot(dataes,datays)
    plt.plot(dataes,model(params,dataes))
    
    
    